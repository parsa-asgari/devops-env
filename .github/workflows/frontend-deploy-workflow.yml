name: Deploy Frontend to Homelab k3s

on:
  push:
    branches:
      - main
  pull_request:
    branches:
    - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: parsa-asgari/devopsenv-frontend

jobs:
  build_and_push_image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          frontend-src:
            - 'frontend-src/**'  

    - name: Get semantic version
      id: version
      uses: paulhatch/semantic-version@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        major_pattern: '^feat!:'
        minor_pattern: '^feat:'
        patch_pattern: '^fix:'
        default: patch
        bump: auto

    - name: Create Git tag
      run: |
        if git rev-parse ${{ steps.version.outputs.version }} >/dev/null 2>&1; then
          echo "Tag ${{ steps.version.outputs.version }} already exists locally."
        else
          git tag ${{ steps.version.outputs.version }}
        fi

        if git ls-remote --tags origin | grep -q "refs/tags/${{ steps.version.outputs.version }}$"; then
          echo "Tag ${{ steps.version.outputs.version }} already exists in remote."
        else
          git push origin ${{ steps.version.outputs.version }}
        fi

    - uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@v6
      with:
        context: ./frontend-src
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        load: false

  create_github_release:
    runs-on: ubuntu-latest
    needs: [build_and_push_image]
    permissions:
      contents: write
    steps:
    - name: Create GitHub Release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ needs.build_and_push_image.outputs.version }}
        release_name: Release ${{ needs.build_and_push_image.outputs.version }}
        body: |
          New release with Docker image version ${{ needs.build_and_push_image.outputs.version }} deployed to Kubernetes.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push_image, create_github_release]
    permissions:
      contents: write
    steps:
      - name: Set up Kubernetes kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG_FILE }}" > kubeconfig
          chmod 600 kubeconfig
        env:
          KUBECONFIG_FILE: ${{ secrets.KUBECONFIG_FILE }}

      - name: Deploy to Kubernetes
        uses: azure/setup-kubectl@v3

      - name: Apply Kubernetes manifests
        run: |
          sed -i "s|image:.*|image: ${{ secrets.DOCKER_USERNAME }}/my-app:${{ steps.version.outputs.version }}|" k8s-manifest.yaml
          kubectl apply -f k8s-manifest.yaml --kubeconfig=kubeconfig
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG_FILE }}
